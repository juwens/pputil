name: Push at Main

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: macos-15

    steps:
    - uses: actions/checkout@v4
    - uses: Swatinem/rust-cache@v2
    - name: Build
      run: cargo build --release # --verbose
    - name: TarGz Release
      run: tar -czvf target/release/pputil.tar.gz -C target/release pputil
    - name: Upload Artifacts
      id: artifact-upload
      uses: actions/upload-artifact@v4
      with:
        path: |
          target/release/pputil.tar.gz
          target/release/pputil
    - name: Run tests
      run: cargo test --release # --verbose

  release:
    needs: [build]
    runs-on: ubuntu-latest
#    permissions:
#      contents: write 
# https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#create-a-tag-object--fine-grained-access-tokens
# https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    steps:
      - uses: actions/checkout@v4
      - name: extract version from cargo.toml
        id: cargo_toml
        run: |
          echo "package__version=$(yq .package.version Cargo.toml)" >> $GITHUB_OUTPUT
          echo "tag=v$(yq .package.version Cargo.toml)" >> $GITHUB_OUTPUT
      - name: create git lightweight tag # not annotated
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.cargo_toml.outputs.tag }}',
              sha: context.sha
            })
      # - name: create annotated tag with curl
      #   env:
      #     GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      #   run: |
      #     curl -L \
      #     -X POST \
      #     -H "Accept: application/vnd.github+json" \
      #     -H "Authorization: Bearer $GH_TOKEN" \
      #     -H "X-GitHub-Api-Version: 2022-11-28" \
      #     https://api.github.com/repos/OWNER/REPO/git/tags \
      #     -d '{"tag":"v0.0.1","message":"initial version","object":"${{ github.sha }}","type":"commit","tagger":{"name":"Monalisa Octocat","email":"octocat@github.com","date":"2011-06-17T14:53:35-07:00"}}'
      # - name: create annotated tag
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       console.log({

      #       });
      #       let res = await github.request('POST /repos/{owner}/{repo}/git/tags', {
      #         owner: context.repo.owner,
      #         repo: context.repo.owner,
      #         tag: '${{ steps.cargo_toml.outputs.tag }}',
      #         message: 'automatic creating tag ${{ steps.cargo_toml.outputs.tag }}',
      #         object: context.sha,
      #         type: 'commit',
      #         tagger: {
      #           name: context.repo.owner,
      #           email: 'noreply@github.com',
      #           date: new Date().toISOString()
      #         },
      #         headers: {
      #           'X-GitHub-Api-Version': '2022-11-28'
      #         }
      #       });
      #       console.log(res.data);

      # - name: get tag
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       let res = await github.request('GET /repos/{owner}/{repo}/git/tags/{tag}',
      #       {
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         tag: '${{ steps.cargo_toml.outputs.tag }}',
      #         headers: {
      #           'X-GitHub-Api-Version': '2022-11-28'
      #         }
      #       });
      #       console.log(res.data);

      - name: create gh release draft
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            // v1.2.3
            let raw_version = '${{ steps.cargo_toml.outputs.package__version }}';
            let version = `v${{ steps.cargo_toml.outputs.package__version }}`;
            console.log(`raw_version: ${raw_version}`);
            console.log(`version: ${version}`);

            let createReleaseRes = await github.request('POST /repos/{owner}/{repo}/releases', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              target_commitish: 'main',
              name: `${raw_version}`,
              body: '',
              draft: false,
              prerelease: true,
              generate_release_notes: false,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            core.info('created release');
            core.exportVariable('release_id', createReleaseRes.data.id);
            
            let d = createReleaseRes.data;
            console.log({
              url: d.url,
              html_url: d.html_url,
              tag_name: d.tag_name,
              name: d.name,
              draft: d.draft,
              prerelease: d.prerelease,
              created_at: d.created_at,
              data: createReleaseRes.data,
            });
      
      - run: ls -lh

      - name: download temp build artifacts
        uses: actions/download-artifact@v4

      - run: ls -lh
      - run: ls -lh artifact

      - name: add assets to release
        uses: actions/github-script@v7
        with:
          debug: true
          script: |
            const fs = require('fs');
            
            console.log({
              'steps.create_release.outputs.release_id': '${{ steps.create_release.outputs.release_id }}',
              'core.getInput("release_id");': core.getInput('release_id', { required: false }),
              '{env.release_id }': '${{ env.release_id }}'
            });

            //const releaseId = core.getInput('release_id', { required: true });
            const releaseId = '${{ env.release_id }}';

            const fileBlob = await fs.promises.readFile('artifact/pputil');

            github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              name: 'test.blob',
              data: fileBlob,
            });

            // https://docs.github.com/en/rest/releases/assets?apiVersion=2022-11-28#upload-a-release-asset
            await github.request('POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              data: 'artifact/pputil',
              name: 'pputil.executable',
              label: 'some label',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
      
