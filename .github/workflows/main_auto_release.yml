name: Push at Main

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: macos-15

    steps:
    - uses: actions/checkout@v4
    - uses: Swatinem/rust-cache@v2
    - name: Build
      run: cargo build --release # --verbose
    - name: TarGz Release
      run: tar -czvf target/release/pputil.tar.gz -C target/release pputil
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        path: |
          target/release/pputil.tar.gz
          target/release/pputil
    - name: Run tests
      run: cargo test --release # --verbose
    - name: extract version from cargo.toml
      id: version
      run: |
        echo "cargo_version=v$(yq .package.version Cargo.toml)" >> $GITHUB_OUTPUT
        echo "-----"
        echo "$GITHUB_OUTPUT"
        echo "-----"
        cat "$GITHUB_OUTPUT"
    - name: echo version
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          console.log("${{ steps.version.outputs.cargo_version }}")
          console.log(context)
      
    - name: create git tag
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ steps.version.outputs.cargo_version }}',
            sha: context.sha
          })

  release:
    runs-on: ubuntu-latest
    steps:
      # - name: dump github-script infos
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       console.log({
      #         arguments_callee_desc: arguments.callee.toString(),
      #         arguments_len: arguments.length,
      #         arguments_callee: arguments.callee,
      #         arguments: arguments,
      #       });
      - name: try to get issues
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
      - run: |
          gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/juwens/pputil/issues
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
      - name: create gh release
        if: always()
        uses: actions/github-script@v7
        # env:
        #   GH_TOKEN: ${{ github.token }}
        with:
          script: |
            console.log(global);
            console.log(context);
            console.log(arguments);

            const version = 'v0.0.0';

            //await octokit.request('POST /repos/{owner}/{repo}/releases', {
            await github.request('POST /repos/{owner}/{repo}/releases', {
              owner: 'OWNER',
              repo: 'REPO',
              tag_name: version,
              target_commitish: 'master',
              name: `Release ${version}`,
              body: `release ${version}`,
              draft: false,
              prerelease: false,
              generate_release_notes: false,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });